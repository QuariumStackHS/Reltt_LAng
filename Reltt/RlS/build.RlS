Begin:


import Std
import C++
import "Generator"



aliase m module


Set_Cache ( RelttPath + "cache/" )


func Add_RelttDll ( )
    Add_DLL ( RelttPath + "Lib/client.a" )
    Add_DLL ( RelttPath + "/bin/Bundled/Reltt.so" )

end;

func Add_Reltt_import ( )

        Add ASM
        Add Compilator
        Add CPP_Module
        Add Generator
        Add RelttSTD
        Add Remote
        Add FSys
        Add Qemu_D
        Add_DLL ( RelttPath + "Lib/client.a" )

        
        Add Reltt_Utils
        Add Reltt_Ins_func
        Add Reltt_Value
        Add Reltt_linked
        Add MTT
        Add oop
        Add Reltt


        
end;

func Add_Reltt ( )
        m "ASM" ( "" + RelttPath + "Modules/ASM.cpp" )
        m "Compilator" ( "" + RelttPath + "Modules/Compilator.cpp" )
        m "CPP_Module" ( RelttPath + "Modules/CPP_Module.cpp" )
        m "Generator" ( RelttPath + "Modules/Generator.cpp" )
        m "RelttSTD" ( RelttPath + "Modules/RelttSTD.cpp" )
        m "FSys" ( RelttPath + "Modules/FSys.cpp" )
        m "Remote" ( RelttPath + "Modules/Remote.cpp" )   
        m "Qemu_D" ( RelttPath + "Modules/Qemu_D.cpp" )
        


        create_mod_list ( RelttPath + "../build/mods.py" )
        /* Reltt is compiled here */
        m "Reltt" ( RelttPath + "Reltt.cpp" )
        m "Reltt_Value" ( RelttPath + "Reltt_Value.cpp" )
        m "Reltt_linked" ( RelttPath + "Reltt_Linked_List.cpp" )
        m "Reltt_Ins_func" ( RelttPath + "Reltt_Instruction_func.cpp" )
        m "Reltt_Utils" ( RelttPath + "Utils.cpp" )
        m "MTT" ( RelttPath + "MTT.cpp" )
        m "oop" ( RelttPath + "oop.cpp" )


        /* Tell the linked .o here */
> Add_Reltt_import
end;


func Native ( string string )

    As_Native @1 @2


    Exe ( RelttPath + "bin/" + @1 + Suffix )
    > Add_RelttDll

    Add @1
    module @1 ( RelttPath + "cache/" + @1 + "-OBJ.cpp" )
    link-this

    /* bundling it */

    /*
    Exe ( RelttPath + "bin/Bundled/" + @1 + Suffix )
    Add @1

    > Add_Reltt_import

    module @1 ( RelttPath + "cache/" + @1 + "-OBJ.cpp" )
    link-this
    */

    /* Clean ( "cache/" + @1 ) */
end;

func update ( )

    /* > update_Reltt
    <> Update ( RelttPath + "RlS/build.RlS" )
    <> Help ( RelttPath + "RlS/help.RlS" )
    > Native -> Reltt_Update Update
    
    
    Clean "Reltt_Update"

    Gen_Help
    > Native -> Reltt_Help Help
    Clean "Reltt_Help"
    exit */

end;



func build_Reltt ( )
    Exe ( RelttPath + "bin/Bundled/Reltt.so" )
    > Add_Reltt

    
    link-this_DLL
end;
/*
<> yoman ( RelttPath + "Lib/client.a" )
*/
func build_Reltt_int ( )

    Exe ( RelttPath + "bin/Reltt.RX")
        
        > Add_Reltt_import
        Add main
        
        
        module "main" ( RelttPath + "/main.cpp" )
    link-this
    
    Exe ( RelttPath + "bin/Bundled/Reltt.RX" )

        > Add_RelttDll
        Add Dmain
        module "Dmain" ( RelttPath + "/main.cpp" )
    link-this
    

end;

func build_Installer ( )
    Exe ( RelttPath + "bin/" + "Reltt-Installer.RX" )
        module "Installer" ( RelttPath + "../Installer/Installer.cpp" )
        Add Installer
    link-this
end;
> build_Reltt
> build_Reltt_int
> build_Installer
Gen_Help
show

end;